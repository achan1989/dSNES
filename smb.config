[LABELS]

# Format is as follows:
# 0xBEEF = MyLabel

# Labels for hardware registers.

# PPU
0x2000 = r_PPU_CTRL
0x2001 = r_PPU_MASK
0x2002 = r_PPU_STATUS
0x2003 = r_OAM_ADDR
0x2004 = r_OAM_DATA
0x2005 = r_PPU_SCROLL
0x2006 = r_PPU_ADDR
0x2007 = r_PPU_DATA
0x4014 = r_OAM_DMA

# APU / IO
0x4000 = r_APU_pulse_1_1
0x4001 = r_APU_pulse_1_2
0x4002 = r_APU_pulse_1_3
0x4003 = r_APU_pulse_1_4
0x4004 = r_APU_pulse_2_1
0x4005 = r_APU_pulse_2_2
0x4006 = r_APU_pulse_2_3
0x4007 = r_APU_pulse_2_4
0x4008 = r_APU_tri_1
0x4009 = r_APU_tri_2
0x400A = r_APU_tri_3
0x400B = r_APU_tri_4
0x400C = r_APU_noise_1
0x400D = r_APU_noise_2
0x400E = r_APU_noise_3
0x400F = r_APU_noise_4
0x4010 = r_APU_DMC_1
0x4011 = r_APU_DMC_2
0x4012 = r_APU_DMC_3
0x4013 = r_APU_DMC_4
0x4015 = r_APU_status
0x4016 = r_JOY1
0x4017 = r_APU_frame


# Labels for variables.

0x0200 = vbGroupsOfFourSomethings
0x0300 = vbSomethingForNametables1?
0x0301 = vbSomethingForNametables2?
0x073F = varSomethingForNametables3?
0x0740 = varSomethingForNametables4?
0x0770 = varSetInRESET_00
0x0778 = varCachedPPUCTRL
0x07A7 = varSetInRESET_A5
0x07D7 = vbFiveThings?
0x07FF = varWarmBoot?


# Labels for SMB code.

0x8000 = RESET
0x800A = vblank1
0x800F = vblank2
0x8018 = cold_boot_check?
0x802B = init_everything
0x8057 = infinite_loop

0x8220 = InitArrayOf64Things
0x8227 = iterate_groups

0x8E19 = InitNametables
0x8E26 = choose_nametable

0x8EE6 = write_PPUSCROLL_x2

0x8E2D = latch_PPUADDR
0x8E3B = fill_$24
0x8E4D = fill_$00
0x8EED = WriteAndCachePPUCTRL

0x90CC = ZeroizeRam
0x90D2 = set_zeroize_page
0x90D4 = check_skip_stack?
0x90DC = zeroize_byte
0x90DE = skip_byte


[FORCE END CHUNK]

# When parsing a chunk, reaching any of the addresses in this section will
# cause the parser to end the chunk.
# Format is as follows:
# 0xBEEF = Helpful comment.

0x8215 = Attempt to bypass some weirdness.
0xF3B0 = Jump is always taken.


[PRE COMMENTS]

# Format is as follows:
# 0xBEEF = Comment that appears on the line above the given address.

0x8000 = Do some initialisation on power up then do nothing.\nStack grows from 0x01FF downto 0x0100 (but might be limited to 0x0160? see ZeroizeRam).\nAll audio channels are enabled except digital sample (DMC).\nPPU stuff (addresses are in PPU *not* CPU space):\n  PPU nametable starts at 0x2000.\n  PPUDATA increments by one.\n  Sprite pattern table at 0x0000.\n  Background pattern table at 0x1000.\n  Sprites are 8x8.\n  NMI initially disabled.
0x8018 = Checking 5 values in RAM...
0x8043 = No rendering of bg or sprites.\nAllow background and sprites in left column.
0x8220 = There's an array of 64 4-byte objects from 0x0200 to 0x02FF.\nWrite $F8 to element 0 of every object.
0x8E19 = We're setting the top 24 rows of each nametable to a certain value, and the next two rows to a different value.  The last 4 rows are unchanged.\nThe PPU scroll is also reset to 0,0.
0x8E26 = --------\nFirst the nametable at $2400...
0x8EED = Writes a value to PPUCTRL and saves a copy in RAM.\nCalled with the value to write in Acc.
0x90CC = Called with Y = $FE or $D6.\nZeroes out RAM from 0x07YY downto 0x0100, except for the\nstack at 0x01FF downto 0x0160.


[INLINE COMMENTS]

# Format is as follows:
# 0xBEEF = Comment that appears at the end of the line.

0x8009 = Init stack pointer
0x8014 = Y = cold boot value?
0x801D = Skip if value in ram is > $0A
0x8029 = Y = warm boot value?
0x802E = Zero DMC output.
0x803E = Enable all audio channels except DMC.

0x8222 = Red herring??

0x8E19 = Clear PPU address latch.
0x8E46 = A = 0

0x90D8 = Don't clear 0x01FF downto 0x0160


[POST COMMENTS]

# Format is as follows:
# 0xBEEF = Comment that appears on the line below the given address.

0x8012 = Waited for 2nd vblank.
0x8052 = Enable NMI on vblank.
0x8085 = Disable NMI on vblank and cache this.
0x808A = Select $2000 nametable but don't cache this -- why??
0x8E23 = Made sure that PPU was set up correctly -- set almost the same way as in RESET but keeps the current sprite size, master/slave, NMI enabled/disabled.
0x8E2B = ...then the nametable at $2000 (fallthrough weirdness).\n--------
0x8E3B = PPUADDR has incremented by 1.
0x8E42 = Have written $24 to the PPU 4 * $C0 = 768 times (24 rows of 32).
0x8E4D = PPUADDR has incremented by 1.
0x8E51 = Have written $00 to the PPU 64 times (2 rows of 32).
0x8E59 = We jump to a subroutine twice.  The first time it does RTS we jump back within choose_nametable, and the second time it does RTS we return to our caller.
